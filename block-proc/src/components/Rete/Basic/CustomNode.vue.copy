<template>
  <div
    class="node"
    :class="{ selected: data.selected }"
    :style="nodeStyles"
    data-testid="node"
  >
    <div class="title" data-testid="title">{{ data.label }}</div>
    <!-- Outputs-->
    <div
      class="output"
      v-for="[key, output] in outputs"
      :key="key + seed"
      :data-testid="'output-' + key"
    >
      <div class="output-title" data-testid="output-title">
        {{ output.label }}
      </div>
      <Ref
        class="output-socket"
        :emit="emit"
        :data="{
          type: 'socket',
          side: 'output',
          key: key,
          nodeId: data.id,
          payload: output.socket,
        }"
        data-testid="output-socket"
      />
    </div>
    <!-- Controls-->
    <Ref
      class="control"
      v-for="[key, control] in controls"
      :key="key + seed"
      :emit="emit"
      :data="{ type: 'control', payload: control }"
      :data-testid="'control-' + key"
    />
    <!-- Inputs-->
    <div
      class="input"
      v-for="[key, input] in inputs"
      :key="key + seed"
      :data-testid="'input-' + key"
    >
      <Ref
        class="input-socket"
        :emit="emit"
        :data="{
          type: 'socket',
          side: 'input',
          key: key,
          nodeId: data.id,
          payload: input.socket,
        }"
        data-testid="input-socket"
      />
      <div
        class="input-title"
        v-show="!input.control || !input.showControl"
        data-testid="input-title"
      >
        {{ input.label }}
      </div>
      <Ref
        class="input-control"
        v-show="input.control && input.showControl"
        :emit="emit"
        :data="{ type: 'control', payload: input.control }"
        data-testid="input-control"
      />
    </div>
  </div>
</template>

<script lang="ts">
import { defineComponent } from 'vue'
import { Ref } from 'rete-vue-plugin'

function sortByIndex(entries) {
  entries.sort((a, b) => {
    const ai = a[1] && a[1].index || 0
    const bi = b[1] && b[1].index || 0

    return ai - bi
  })
  return entries
}

export default defineComponent({
  props: ['data', 'emit', 'seed'],
  methods: {
    onRef(element, key, entity, type) {
      if (!element) return

      if (['output', 'input'].includes(type)) {
        this.emit({
          type: 'render', data: {
            type: 'socket',
            side: type,
            key,
            nodeId: this.data.id,
            element,
            payload: entity.socket
          }
        })
      } else if (type === 'control') {
        this.emit({
          type: 'render', data: {
            type: 'control',
            element,
            payload: entity
          }
        })
      }
    }
  },
  computed: {
    nodeStyles() {
      return {
        width: Number.isFinite(this.data.width) ? `${this.data.width}px` : '',
        height: Number.isFinite(this.data.height) ? `${this.data.height}px` : ''
      }
    },
    inputs() {
      return sortByIndex(Object.entries(this.data.inputs))
    },
    controls() {
      return sortByIndex(Object.entries(this.data.controls))
    },
    outputs() {
      return sortByIndex(Object.entries(this.data.outputs))
    }
  },
  mounted() {
    console.log(this.$props);
  },
  components: {
    Ref
  }
})
</script>

<style lang="scss" scoped>
@use "sass:math";
@import "./vars";

.node {
  background: $color-node-background;
  border-radius: $border-radius-node;
  cursor: pointer;
  box-sizing: border-box;
  width: $node-width;
  height: auto;
  padding-bottom: 6px;
  position: relative;
  user-select: none;

  color: $color-node-foreground;
  filter: drop-shadow(0 0 3px #000000cc);
  transition: box-shadow $visual-transition, filter $visual-transition;
  font-family: "Lato", "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
  font-size: 13px;

  &:hover {
    border-color: $color-node-selected;
    background: $color-node-background;
    box-shadow: 0 0 0 0.35px $color-node-selected;
  }

  &.selected {
    z-index: 5;
    box-shadow: 0 0 0 1px $color-node-selected;
  }

  .title {
    color: $color-node-title-foreground;
    font-family: "Lato", "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
    font-size: 13px;
    padding: 0.4em 0.75em;

    background: $color-node-title-background;
    border-radius: $border-radius-node $border-radius-node 0 0;
    cursor: grab;

    & > span {
      pointer-events: none;
    }
  }

  .output {
    text-align: right;
    padding-right: 0.5em;
  }

  .input {
    text-align: left;
    padding-left: 0.5em;
  }

  .output-socket {
    text-align: right;
    margin-right: -12px;
    display: inline-block;
  }

  .input-socket {
    text-align: left;
    margin-left: -12px;
    display: inline-block;
  }

  .input-title,
  .output-title {
    vertical-align: middle;
    color: white;
    display: inline-block;
    font-family: "Lato", "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
    font-size: 13px;
    margin: $socket-margin;
    line-height: $socket-size;
  }

  .input-control {
    z-index: 10;
    width: calc(100% - #{$socket-size + 2 * $socket-margin});
    vertical-align: middle;
    display: inline-block;
  }

  .control {
    padding: $socket-margin math.div($socket-size, 2) + $socket-margin;
  }
}
</style>
