import { NodeEditor, GetSchemes, ClassicPreset } from "rete";
import {
    ContextMenuExtra,
    ContextMenuPlugin,
    Presets as ContextMenuPresets
} from "rete-context-menu-plugin";

import { VuePlugin, Presets, VueArea2D } from "rete-vue-plugin";


// export class MyControl<T extends 'address'> extends ClassicPreset.InputControl<'number'> { }

export class CustomControl<T extends 'address' | 'number'> extends ClassicPreset.InputControl<'number'> {
    constructor(type: T, options?: any) {
        super(type as 'number', options);
    }
}

export class NumberNode extends ClassicPreset.Node<
    {},
    { value: ClassicPreset.Socket },
    { value: ClassicPreset.InputControl<"number"> }
> {
    height = 120;
    width = 180;

    constructor(socket: ClassicPreset.Socket, initial: number, change?: () => void) {
        super("Number");
        this.addControl(
            "value",
            new CustomControl("address", { initial, change })
        );
        this.addOutput("value", new ClassicPreset.Output(socket, "Number"));
    }

    data(): { value: number } {
        return {
            value: this.controls.value.value || 0
        };
    }
}


export class AddNode extends ClassicPreset.Node<
    { left: ClassicPreset.Socket; right: ClassicPreset.Socket },
    { value: ClassicPreset.Socket },
    { value: ClassicPreset.InputControl<"number"> }
> {
    height = 190;
    width = 180;

    constructor(
        socket: ClassicPreset.Socket,
        change?: () => void,
        private update?: (control: ClassicPreset.InputControl<"number">) => void
    ) {
        super("Add");
        const left = new ClassicPreset.Input(socket, "Left");
        const right = new ClassicPreset.Input(socket, "Right");

        left.addControl(
            new ClassicPreset.InputControl("number", { initial: 0, change })
        );
        right.addControl(
            new ClassicPreset.InputControl("number", { initial: 0, change })
        );

        this.addInput("left", left);
        this.addInput("right", right);
        this.addControl(
            "value",
            new ClassicPreset.InputControl("number", {
                readonly: true
            })
        );
        this.addOutput("value", new ClassicPreset.Output(socket, "Number"));
    }

    data(inputs: { left?: number[]; right?: number[] }): { value: number } {
        const leftControl = this.inputs.left?.control as ClassicPreset.InputControl<
            "number"
        >;
        const rightControl = this.inputs.right
            ?.control as ClassicPreset.InputControl<"number">;

        const { left, right } = inputs;
        const value =
            (left ? left[0] : leftControl.value || 0) +
            (right ? right[0] : rightControl.value || 0);

        this.controls.value.setValue(value);

        if (this.update) this.update(this.controls.value);

        return { value };
    }
}

