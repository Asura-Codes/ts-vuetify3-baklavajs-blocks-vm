/**
 * Types and all nodes
 */
import { NodeEditor, GetSchemes, ClassicPreset } from "rete";
import { AreaPlugin, AreaExtensions } from "rete-area-plugin";
import {
    ConnectionPlugin,
    Presets as ConnectionPresets
} from "rete-connection-plugin";
import {
    AutoArrangePlugin,
    Presets as ArrangePresets
} from "rete-auto-arrange-plugin";
import { DataflowEngine } from "rete-engine";
import {
    ContextMenuExtra,
    ContextMenuPlugin,
    Presets as ContextMenuPresets
} from "rete-context-menu-plugin";

import { VuePlugin, Presets, VueArea2D } from "rete-vue-plugin";

import CustomNode from "./Basic/CustomNode.vue";
import CustomConnection from "./Basic/CustomConnection.vue";
import CustomSocket from "./Basic/CustomSocket.vue";
import CustomControl from "./Basic/CustomControl.vue";

import { NumberNode, AddNode } from './PortIn'
import { addCustomBackground } from "../custom-background";


class Connection<
    A extends Node,
    B extends Node
> extends ClassicPreset.Connection<A, B> { }

type Node = NumberNode | AddNode;
type ConnProps = Connection<NumberNode, AddNode> | Connection<AddNode, AddNode>;
type Schemes = GetSchemes<Node, ConnProps>;

type AreaExtra = VueArea2D<any> | ContextMenuExtra;


export async function createEditor(container: HTMLElement) {
    const socket = new ClassicPreset.Socket("socket");
    const editor = new NodeEditor<Schemes>();
    const area = new AreaPlugin<Schemes, AreaExtra>(container);
    const connection = new ConnectionPlugin<Schemes, AreaExtra>();
    const render = new VuePlugin<Schemes, AreaExtra>();
    const arrange = new AutoArrangePlugin<Schemes>();
    const engine = new DataflowEngine<Schemes>();

    function process() {
        engine.reset();

        editor
            .getNodes()
            .filter((n) => n instanceof AddNode)
            .forEach((n) => engine.fetch(n.id));
    }

    const contextMenu = new ContextMenuPlugin<Schemes>({
        items: ContextMenuPresets.classic.setup([
            ["Number", () => new NumberNode(socket, 0, process)],
            ["Add", () => new AddNode(socket, process, (c) => area.update("control", c.id))]
        ])
    });
    area.use(contextMenu);

    AreaExtensions.selectableNodes(area, AreaExtensions.selector(), {
        accumulating: AreaExtensions.accumulateOnCtrl()
    });

    render.addPreset(Presets.contextMenu.setup());
    render.addPreset(
        Presets.classic.setup({
            customize: {
                node(context) {
                    return CustomNode;
                    // return Presets.classic.Node;
                },
                connection(context) {
                    return CustomConnection;
                },
                socket(context) {
                    return CustomSocket;
                },
                control(context) {
                    return CustomControl;
                    // return Presets.classic.Control;
                },
            },
        })
    );

    connection.addPreset(ConnectionPresets.classic.setup());

    arrange.addPreset(ArrangePresets.classic.setup());

    addCustomBackground(area);

    editor.use(engine);
    editor.use(area);
    
    area.use(connection);
    area.use(render);
    area.use(arrange);

    AreaExtensions.simpleNodesOrder(area);
    AreaExtensions.showInputControl(area);

    editor.addPipe((context) => {
        if (["connectioncreated", "connectionremoved"].includes(context.type)) {
            process();
        }
        return context;
    });

    const a = new NumberNode(socket, 1, process);
    const b = new NumberNode(socket, 1, process);
    const c = new AddNode(socket, process, (c) => area.update("control", c.id));

    const con1 = new Connection(a, "value", c, "left");
    const con2 = new Connection(b, "value", c, "right");

    await editor.addNode(a);
    await editor.addNode(b);
    await editor.addNode(c);

    await editor.addConnection(con1);
    await editor.addConnection(con2);

    await arrange.layout();
    AreaExtensions.zoomAt(area, editor.getNodes());

    return {
        destroy: () => area.destroy()
    };
}
